#include <stdio.h>

#include <stdlib.h>

#define FRAME_SIZE 4

#define PAGE_SIZE 4

#define TOTAL_PAGES 10

int pages[TOTAL_PAGES] = {0, 1, 2, 3, 4, 0, 1, 2, 3, 4};
int frames[FRAME_SIZE];

int pageFaults = 0;

int findOptimalPage(int pages[], int currentPageIndex, int frameCount) {

int farthest = currentPageIndex;

int optimalPage = -1;

for (int i = 0; i < frameCount; i++) {

int j;

for (j = currentPageIndex + 1; j < TOTAL_PAGES; j++) {

if (frames[i] == pages[j]) {

if (j > farthest) {

farthest = j;

optimalPage = i;

}

break;

}

}

if (j == TOTAL_PAGES) {

return i; // This page will not be used again

}

}

return (optimalPage == -1) ? 0 : optimalPage;

}

void optimalPaging() {

for (int i = 0; i < TOTAL_PAGES; i++) {

int page = pages[i];

int found = 0;

for (int j = 0; j < FRAME_SIZE; j++) {
if (frames[j] == page) {

found = 1;

break;

}

}

if (!found) {

int replaceIndex = findOptimalPage(pages, i, FRAME_SIZE);

frames[replaceIndex] = page;

pageFaults++;

}

}

}

int main() {

optimalPaging();

printf("Total Page Faults: %d\n", pageFaults);

return 0;

}
